//Этот проект создан с помощью классического шаблона
#include <iostream>
#include "Header.h"





int main() {
	
	//Task 1
	//LastDerived ld;
//	std::cout << ld.getMethod() << std::endl;

	//Чтобы вызвать функцию базового класса в последнем наследнике нужно, создать конструктор базового класса, плюс наследников. И последний наследний наследует функции двух предыдущих классов, которые в свою очередь,
	// наследуют функции базового класса. Проблема здесь в том, что при вызове функции, компилятор не будет знать, к какому классу обратиться ( левый или правый в ромбе ).




	//Task 2
	

	OrchWarrior OW1;

	std::cout <<" ORchWarrior's HP = " <<  OW1.getHP() << std::endl;


	return 0;
}